// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Status {
  PENDING
  APPROVED
  REJECTED
}

model User{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String  @unique
  institutional_email    String
  isVerified             Boolean @default(false)
  approved               Boolean @default(true)
  verificationToken      String?
  tokenExpiration        DateTime?
  hash     String
  schoolId           Int   
  school  School  @relation("SchoolUsers", fields: [schoolId], references: [id], onDelete: Cascade)

  role     Role   @default(STUDENT)

  Notes Notes[] @relation("StudentNotes")
  

  @@map("users")
}

model School {
  id            Int      @id @default(autoincrement())
  name          String
  email         String

  users         User[]    @relation("SchoolUsers")
  notes         Notes[]   @relation("SchoolNotes")
}


model Notes {
  id            Int      @id @default(autoincrement())
  title         String
  subject       String
  description   String
  filePublicId  String   
  fileUrl       String   
  fileName      String?  
  fileType      String?  
  fileSize      Int?     
  
  isPaid        Boolean  @default(false)
  price         Decimal? @db.Decimal(10, 2)
  
  studentId     Int
  status        Status   @default(PENDING)
  
  Student       User     @relation("StudentNotes", fields: [studentId], references: [id], onDelete: Cascade)

  schoolId      Int
  school        School   @relation("SchoolNotes", fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([schoolId])
  @@index([studentId])
  @@index([status])
  @@index([subject])
  @@index([isPaid])
  @@map("notes")

}




enum Role {
  STUDENT
  ADMIN
  SUPERADMIN

}